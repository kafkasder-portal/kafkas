# 🚀 CURSOR AI AGENT OPTIMIZATION RULES
# Bu dosya Cursor AI Agent'ın performansını artırır ve daha iyi öneriler verir

## 🎯 PROJECT CONTEXT
- Bu proje bir KAF (Kardeşlik ve Yardımlaşma) portalı
- Frontend: React + Vite
- Backend: Node.js + Express + TypeScript
- Database: PostgreSQL
- Real-time: WebSocket bağlantıları
- Multi-language: Türkçe, İngilizce, Rusça

## 🛠️ DEVELOPMENT PATTERNS
- Component-based architecture
- Service layer pattern
- RESTful API design
- Real-time notifications
- Responsive design
- Accessibility compliance

## 📁 FILE STRUCTURE
- `/src/components/` - React bileşenleri
- `/src/pages/` - Sayfa bileşenleri
- `/src/services/` - API servisleri
- `/src/contexts/` - React context'leri
- `/backend/src/` - Backend kodları
- `/backend/database/` - Database migration'ları

## 🎨 CODING STANDARDS
- Use TypeScript for type safety
- Follow React hooks best practices
- Implement error boundaries
- Use async/await for API calls
- Add proper error handling
- Include loading states
- Use semantic HTML
- Implement responsive design

## 🚀 PERFORMANCE OPTIMIZATION
- Lazy load components
- Optimize bundle size
- Use React.memo for expensive components
- Implement proper caching
- Optimize database queries
- Use WebSocket for real-time features

## 🔧 COMMON TASKS
- Add new pages/components
- Implement API endpoints
- Create database migrations
- Add form validation
- Implement real-time features
- Add multi-language support
- Create responsive layouts
- Add error handling

## 📝 NAMING CONVENTIONS
- Components: PascalCase (UserProfile.jsx)
- Files: camelCase (userService.js)
- Functions: camelCase (getUserData)
- Constants: UPPER_SNAKE_CASE (API_BASE_URL)
- CSS classes: kebab-case (user-profile)

## 🎯 AI AGENT INSTRUCTIONS
- Provide complete, working code solutions
- Include error handling and loading states
- Add TypeScript types when applicable
- Follow existing code patterns
- Include comments for complex logic
- Suggest performance optimizations
- Consider accessibility requirements
- Provide responsive design solutions

## 🔍 DEBUGGING TIPS
- Use React DevTools for component debugging
- Check Network tab for API issues
- Use Console for JavaScript errors
- Verify database connections
- Test WebSocket connections
- Check for memory leaks
- Validate form inputs
- Test cross-browser compatibility
